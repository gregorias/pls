import{r as s,o as i,c as l,a as e,f as a,F as r,b as t,e as c}from"./app.0985f56a.js";import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";const d={},h=e("h1",{id:"comparison",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#comparison","aria-hidden":"true"},"#"),t(" Comparison")],-1),f=e("p",null,[t("There are lots of alternatives to "),e("code",null,"ls"),t(". Here are some of the most popular ones.")],-1),p={href:"https://github.com/ogham/exa",target:"_blank",rel:"noopener noreferrer"},u=e("code",null,"exa",-1),m={href:"https://github.com/Peltoche/lsd",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"lsd",-1),g={href:"https://github.com/athityakumar/colorls",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"colorls",-1),y=c('<p><code>pls</code> stands out from all of these, thanks to some very specific choices. Here are some examples of how <code>pls</code> is a whole class apart from these tools.</p><h2 id="general-differences" tabindex="-1"><a class="header-anchor" href="#general-differences" aria-hidden="true">#</a> General differences</h2><ul><li>A lot of <code>ls</code> replacements try to maintain compatibility with <code>ls</code>&#39;s options. <code>pls</code> does not do that which allows it to have a way more fluent API.</li><li>While <code>pls</code> works for everyone, it targets the tech-savvy pro users, specifically developers using features tailored to their needs.</li><li>Highly customisable using simple configuration that can be checked-in with your code. No other tool offers this level of customisation.</li><li>Very meticulously chosen iconography with support for Nerd Fonts, emoji and even no icons at all.</li></ul><h3 id="specific-differences" tabindex="-1"><a class="header-anchor" href="#specific-differences" aria-hidden="true">#</a> Specific differences</h3><h3 id="exa" tabindex="-1"><a class="header-anchor" href="#exa" aria-hidden="true">#</a> exa</h3><p>exa is likely the most popular alternative to <code>ls</code>. Here is some ways in which <code>pls</code> differs from exa.</p><ul><li><p><code>pls</code> shows dotted files (with specs) by default; exa requires the <code>--all</code> flag.</p><ul><li><code>pls</code> never shows the current directory <code>.</code> and parent directory <code>..</code>; exa does when passed the <code>--all</code> flag twice.</li></ul></li><li><p><code>pls</code> uses the file name, extension and programming language to determine <a href="../features/colors">colors</a>; exa uses the file type.</p></li><li><p><code>pls</code> has <a href="../features/icons">icons</a> turned on by default and can be opted out; exa needs you to opt in to icons using the <code>--icons</code> flag.</p></li><li><p><code>pls</code> has the concept of file <a href="../features/importance">importance</a> built into it; exa doesn&#39;t have such this feature.</p><ul><li><code>pls</code> uses the <code>--all</code> flag for adjusting the visibility cut-off for importance; <code>exa</code> uses it to show files with leading dots <code>.</code>.</li></ul></li><li><p><code>pls</code> makes use of a very human-friendly API for <a href="../features/details">details</a> and <a href="../features/sorting">sorting</a>, exa has separate flags for each column.</p></li><li><p><code>pls</code> can read <code>.pls.yml</code> files in any directory to extend its configuration; exa can be customised (to a small extent) via environment variables.</p></li></ul>',7);function b(v,w){const o=s("ExternalLinkIcon");return i(),l(r,null,[h,f,e("ul",null,[e("li",null,[e("a",p,[u,a(o)])]),e("li",null,[e("a",m,[_,a(o)])]),e("li",null,[e("a",g,[x,a(o)])])]),y],64)}var V=n(d,[["render",b]]);export{V as default};
