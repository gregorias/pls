import{r as s,o as a,c as r,a as e,f as n,F as c,e as i,b as o}from"./app.0985f56a.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const d={},h=i('<h1 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h1><p>Since its inception, <code>pls</code> has been a tool designed for pros. This goal manifests most evidently in the ability to highly customise <code>pls</code> for your very specific workflow.</p><h2 id="tiers" tabindex="-1"><a class="header-anchor" href="#tiers" aria-hidden="true">#</a> Tiers</h2><p><code>pls</code> can be configured at three levels, in a cascading manner.</p><ul><li>built-in</li><li>user-level</li><li>project-level</li></ul><p>Even within a level, a node can match multiple different specs, rules from which are then sequentially applied to the node in the order in which they are defined. This enables higher-specificity specs to override attributes from the lower-specificity ones.</p><h3 id="built-in" tabindex="-1"><a class="header-anchor" href="#built-in" aria-hidden="true">#</a> Built-in</h3><p><code>pls</code> ships with a very lean configuration out-of-the-box. This configuration makes it directly usable for the majority of users without bogging down the performance in a lot of unnecessary computation.</p>',8),p=o("You can see the built-in configuration "),u={href:"https://github.com/dhruvkb/pls/tree/main/src/pls/data/",target:"_blank",rel:"noopener noreferrer"},_=o("here"),f=o("."),m=e("h3",{id:"user-level",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#user-level","aria-hidden":"true"},"#"),o(" User-level")],-1),g=e("p",null,[e("code",null,"pls"),o(" can be configured at the user level by placing a "),e("code",null,".pls.yml"),o(" file in the user's home directory, denoted by "),e("code",null,"~"),o(" on POSIX and "),e("code",null,"C:\\Users\\*"),o(" on Windows.")],-1),b=e("p",null,"The configuration described by this file extends and overrides the built-in configuration.",-1),y=o("You can see my personal configuration "),v={href:"https://github.com/dhruvkb/dotfiles/blob/main/pls/.pls.yml",target:"_blank",rel:"noopener noreferrer"},k=o("here"),w=o(". It's symlinked into "),x=e("code",null,"~/.pls.yml",-1),j=o("."),T=e("h3",{id:"project-level",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#project-level","aria-hidden":"true"},"#"),o(" Project-level")],-1),I=e("p",null,[e("code",null,"pls"),o(" can also be configured per-project by placing a "),e("code",null,".pls.yml"),o(" file in the project. "),e("code",null,"pls"),o(" will look for this config file in the working directory, 4 levels above the working directory (configurable with the "),e("code",null,"--depth"),o(" parameter) and in the Git root (if the project is Git-tracked).")],-1),L=e("p",null,"The configuration described by this file extends and overrides the user-level and built-in configurations.",-1),Y=o("You can take a look at the project configuration of "),N=e("code",null,"pls",-1),S=o(" itself "),E={href:"https://github.com/dhruvkb/pls/blob/main/.pls.yml",target:"_blank",rel:"noopener noreferrer"},A=o("here"),B=o("."),R=i('<h2 id="pls-yml" tabindex="-1"><a class="header-anchor" href="#pls-yml" aria-hidden="true">#</a> <code>.pls.yml</code></h2><p>The <code>.pls.yml</code> configuration file consists of five parts.</p><ul><li><code>emoji_icons</code></li><li><code>nerd_icons</code></li><li><code>node_specs</code></li><li><code>prefs</code></li><li><code>constants</code></li></ul><h3 id="node-specs" tabindex="-1"><a class="header-anchor" href="#node-specs" aria-hidden="true">#</a> Node specs</h3><p><code>node_specs</code> is a list of node specifications that describe the methods for identifying nodes and their rendering configuration.</p><p>Read more <a href="./node_specs">in the <code>node_specs</code> docs</a>.</p><h3 id="icons-emoji-and-nerd-font" tabindex="-1"><a class="header-anchor" href="#icons-emoji-and-nerd-font" aria-hidden="true">#</a> Icons (emoji and Nerd Font)</h3><p>Both <code>emoji_icons</code> and <code>nerd_icons</code> are dictionaries mapping icon names to icon glyphs.</p><p>Read more <a href="./icons">in the <code>*_icons</code> docs</a>.</p><h2 id="schema-validation" tabindex="-1"><a class="header-anchor" href="#schema-validation" aria-hidden="true">#</a> Schema validation</h2>',10),V=o("Writing YAML manually can be error-prone. To make the process simpler, we provide a YAML-format JSON-schema of the file for validation, hosted at "),C={href:"https://raw.githubusercontent.com/dhruvkb/pls/main/src/pls/data/schema/pls_config.yml",target:"_blank",rel:"noopener noreferrer"},M=o("this URL"),F=o("."),U=e("div",{class:"language-text ext-text"},[e("pre",{class:"language-text"},[e("code",null,`https://raw.githubusercontent.com/dhruvkb/pls/main/src/pls/data/schema/pls_config.yml
`)])],-1),D=e("p",null,"Refer to your IDE/editor docs for instructions on how to associate YAML files with a schema. This will help you write mostly valid config files.",-1),G={href:"https://www.jetbrains.com/help/idea/json.html#ws_json_schema_add_custom",target:"_blank",rel:"noopener noreferrer"},H=o("IntelliJ IDEA"),J={href:"https://github.com/redhat-developer/vscode-yaml#associating-schemas",target:"_blank",rel:"noopener noreferrer"},O=o("Visual Studio Code +_YAML Language Support by Red Hat"),P=o("You can also compare your configuration files against the schema using an online validator such as "),W={href:"https://json-schema.hyperjump.io",target:"_blank",rel:"noopener noreferrer"},q=o("Hyperjump"),X=o(".");function z(K,Q){const t=s("ExternalLinkIcon");return a(),r(c,null,[h,e("p",null,[p,e("a",u,[_,n(t)]),f]),m,g,b,e("p",null,[y,e("a",v,[k,n(t)]),w,x,j]),T,I,L,e("p",null,[Y,N,S,e("a",E,[A,n(t)]),B]),R,e("p",null,[V,e("a",C,[M,n(t)]),F]),U,D,e("ul",null,[e("li",null,[e("a",G,[H,n(t)])]),e("li",null,[e("a",J,[O,n(t)])])]),e("p",null,[P,e("a",W,[q,n(t)]),X])],64)}var ee=l(d,[["render",z]]);export{ee as default};
