import{r as o,o as c,c as l,a as e,f as n,F as p,e as s,b as a}from"./app.0985f56a.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const d={},h=s('<h1 id="node-spec" tabindex="-1"><a class="header-anchor" href="#node-spec" aria-hidden="true">#</a> Node spec</h1><p>A node spec determines how each node is supposed to be displayed. As such, each spec consists of two components.</p><ul><li>identification method</li><li>rendering configuration</li></ul><h2 id="identification-method" tabindex="-1"><a class="header-anchor" href="#identification-method" aria-hidden="true">#</a> Identification method</h2><p>A node can be identified based on the following parameters:</p><ul><li>name</li><li>extension</li><li>regular expression pattern</li></ul><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> Name</h3><p>This is a string that is compared for equality against the full name of a node, including the extension if any.</p><h3 id="extension" tabindex="-1"><a class="header-anchor" href="#extension" aria-hidden="true">#</a> Extension</h3><p>This is a string that is compared against the node&#39;s extension, which is defined as the last segment when the file name is split at the dot <code>.</code> characters. If the name contains no dots, it does not have an extension.</p><h3 id="pattern" tabindex="-1"><a class="header-anchor" href="#pattern" aria-hidden="true">#</a> Pattern</h3><p>This is a string containing a regular expression compared against the entire file name, including the extension if any.</p><p>The file is considered to be a match if the regex matches the file name from the start. This is the most versatile of all identification approaches.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The pattern here is a regular expression and not a glob pattern. Also since the regex is matched from the start of the string, the leading caret <code>^</code> is optional. However, to match the end of the string, a trailing dollar sign <code>$</code> is required.</p></div><h2 id="rendering-configuration" tabindex="-1"><a class="header-anchor" href="#rendering-configuration" aria-hidden="true">#</a> Rendering configuration</h2><p>The rendering configuration specifies the following attributes.</p><ul><li>icon</li><li>importance</li><li>color</li><li>collapse</li></ul><h3 id="icon" tabindex="-1"><a class="header-anchor" href="#icon" aria-hidden="true">#</a> Icon</h3><p>The icon attributes sets the name of the icon that will be associated with the matching nodes. This is not the actual icon code point or emoji, just the name for the icon. You can omit this field to not show any icon for the node.</p><p>See <a href="../features/icons">feature docs</a>.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>You will also need to configure the <code>emoji_icons</code> and <code>nerd_icons</code> for the icons to actually show up in the output.</p></div><h3 id="importance" tabindex="-1"><a class="header-anchor" href="#importance" aria-hidden="true">#</a> Importance</h3><p>This can be an integer, positive or negative, specifying the relevance of the file or folder to your workflow. You can omit this field to use the default value of 0.</p><p>See <a href="../features/importance">feature docs</a>.</p><h3 id="color" tabindex="-1"><a class="header-anchor" href="#color" aria-hidden="true">#</a> Color</h3><p>You can specify the color in one of three forms.</p>',26),u={href:"https://rich.readthedocs.io/en/stable/appendix/colors.html",target:"_blank",rel:"noopener noreferrer"},f=a("color name"),k=e("li",null,[a("hex code, between "),e("code",null,"#000000"),a(" and "),e("code",null,"#ffffff")],-1),m=e("li",null,[a("RGB color code, between "),e("code",null,"rgb(0, 0, 0)"),a(" and "),e("code",null,"rgb(255, 255, 255)")],-1),g=s(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can use the entire 256<sup>3</sup> range of colors in the spec. They will automatically be mapped to the nearest terminal-safe color.</p></div><p>See <a href="../features/colors">feature docs</a>.</p><h4 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h4><div class="language-yaml ext-yml"><pre class="language-yaml"><code><span class="token key atrule">patterns</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>docker<span class="token punctuation">-</span>compose\\b<span class="token punctuation">,</span> Dockerfile\\b<span class="token punctuation">]</span>
<span class="token key atrule">icon</span><span class="token punctuation">:</span> docker
<span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">&quot;#2496ed&quot;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div></div></div>`,4),y=e("code",null,"Dockerfile",-1),b=a("s and Docker Compose config files are rendered in Docker's blue color "),x=a("."),_=s(`<h3 id="collapse" tabindex="-1"><a class="header-anchor" href="#collapse" aria-hidden="true">#</a> Collapse</h3><p>You can collapse files behind other files.</p><ul><li>Specs that use <code>name</code>/<code>names</code> as the identification method can use <code>name</code>/<code>names</code> as the collapse identification method.</li><li>Specs that use <code>extension</code>/<code>extensions</code> as the identification method can use <code>extension</code>/<code>extensions</code> as the collapse identification method.</li><li>Collapsing is not enabled for pattern-based file identification at the moment.</li></ul><p>See <a href="../features/collapse">feature docs</a>.</p><h4 id="examples-1" tabindex="-1"><a class="header-anchor" href="#examples-1" aria-hidden="true">#</a> Examples</h4><div class="language-yaml ext-yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Pipfile.lock
<span class="token key atrule">collapse</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Pipfile
</code></pre><div class="highlight-lines"><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div></div></div><p>This collapses <code>Pipfile.lock</code> behind <code>Pipfile</code>. If there is no <code>Pipfile</code>, there will be no collapse.</p><div class="language-yaml ext-yml"><pre class="language-yaml"><code><span class="token key atrule">extension</span><span class="token punctuation">:</span> css
<span class="token key atrule">icon</span><span class="token punctuation">:</span> css
<span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">&quot;#1572b6&quot;</span>
<span class="token key atrule">collapse</span><span class="token punctuation">:</span>
  <span class="token key atrule">extension</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>scss<span class="token punctuation">,</span> sass<span class="token punctuation">,</span> less<span class="token punctuation">]</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div></div></div><p>This collapses all files with a <code>.css</code> extension behind files with the same name and each extension from the list, in order, till a match is found.</p><p>So if the folder contains the files <code>style.css</code>, <code>style.sass</code> and <code>style.less</code>, the CSS file will be collapsed behind the SASS file.</p><h2 id="shorthand" tabindex="-1"><a class="header-anchor" href="#shorthand" aria-hidden="true">#</a> Shorthand</h2><p>Each of the three identification methods can take multiple values as an array. These are expanded into separate specs when loading.</p><p>For example, consider a spec like the following.</p><div class="language-yaml ext-yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span>
</code></pre></div><p>This, upon loading, will be expanded to three specs.</p><div class="language-yaml ext-yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> a
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> b
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> c
</code></pre></div><p>The same also happens for <code>pattern</code> and <code>extension</code>.</p><p>Similarly, when defining collapse rules, you can set <code>name</code> and <code>extension</code> to arrays, similar to the shorthand notation described <a href="#shorthand">above</a>.</p><p>For example, consider a spec like the following.</p><div class="language-yaml ext-yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span>
  <span class="token key atrule">collapse</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>c<span class="token punctuation">,</span> d<span class="token punctuation">]</span>
</code></pre></div><p>This, upon loading, will be expanded to four specs, in this specific order because the top-level <code>name</code> is split first, followed by <code>collapse.name</code>.</p><div class="language-yaml ext-yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> a
  <span class="token key atrule">collapse</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> c
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> a
  <span class="token key atrule">collapse</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> d
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> b
  <span class="token key atrule">collapse</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> c
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> b
  <span class="token key atrule">collapse</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> d
</code></pre></div><p>The same also happens for <code>extension</code>.</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,24),v=a("For reference, you can look at the "),w={href:"https://github.com/dhruvkb/pls/blob/main/src/pls/data/node_specs.yml",target:"_blank",rel:"noopener noreferrer"},T=a("built-in node specs"),S=a(" from "),I=e("code",null,"pls",-1),N=a(".");function P(C,A){const t=o("ExternalLinkIcon"),i=o("ColorPreview");return c(),l(p,null,[h,e("ul",null,[e("li",null,[e("a",u,[f,n(t)])]),k,m]),g,e("p",null,[y,b,n(i,{color:"#2496ed"}),x]),_,e("p",null,[v,e("a",w,[T,n(t)]),S,I,N])],64)}var Y=r(d,[["render",P]]);export{Y as default};
